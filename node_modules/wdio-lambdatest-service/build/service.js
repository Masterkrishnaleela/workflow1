"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("@wdio/logger"));
var _util = require("./util.js");
var _constants = require("./constants.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const log = (0, _logger.default)('@wdio/lambdatest-service');
const DEFAULT_OPTIONS = {
  setSessionName: true,
  setSessionStatus: true
};
class LambdaRestService {
  constructor(options = {}, capabilities = {}, config = {}) {
    var _this$_config, _this$_config2;
    _defineProperty(this, "_api", void 0);
    _defineProperty(this, "_browser", void 0);
    _defineProperty(this, "_capabilities", void 0);
    _defineProperty(this, "_config", void 0);
    _defineProperty(this, "_failReasons", []);
    _defineProperty(this, "_failures", 0);
    _defineProperty(this, "_failureStatuses", ['failed', 'ambiguous', 'undefined', 'unknown']);
    _defineProperty(this, "_fullTitle", void 0);
    _defineProperty(this, "_isServiceEnabled", true);
    _defineProperty(this, "_options", DEFAULT_OPTIONS);
    _defineProperty(this, "_scenariosThatRan", []);
    _defineProperty(this, "_specsRan", false);
    _defineProperty(this, "_suiteTitle", void 0);
    _defineProperty(this, "_testCnt", 0);
    _defineProperty(this, "_testTitle", void 0);
    _defineProperty(this, "_error", void 0);
    _defineProperty(this, "_ltErrorRemark", void 0);
    _defineProperty(this, "_useScenarioName", void 0);
    _defineProperty(this, "_lambdaCredentials", void 0);
    _defineProperty(this, "_currentTestTitle", void 0);
    this._options = {
      ...DEFAULT_OPTIONS,
      ...options
    };
    this._capabilities = capabilities;
    this._config = config;
    this._testCnt = 0;
    this._failures = 0;
    const strict = Boolean(((_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.cucumberOpts) && ((_this$_config2 = this._config) === null || _this$_config2 === void 0 || (_this$_config2 = _this$_config2.cucumberOpts) === null || _this$_config2 === void 0 ? void 0 : _this$_config2.strict));
    if (strict) {
      this._failureStatuses.push('pending');
    }
  }
  before(caps, specs, browser) {
    this._browser = browser;
    this._scenariosThatRan = [];
  }
  beforeSession(config, capabilities) {
    this._config = {
      ...this._config,
      ...config
    };
    this._capabilities = {
      ...this._capabilities,
      ...capabilities
    };
    const lambdaCredentials = {
      username: this._config.user,
      accessKey: this._config.key,
      isApp: false
    };
    if (this._config.product === 'appAutomation') {
      lambdaCredentials.isApp = true;
    }
    if (this._config.logFile) {
      lambdaCredentials.logFile = this._config.logFile;
    }
    if (this._config.ltErrorRemark === true) {
      this._ltErrorRemark = true;
    }
    if (this._config.useScenarioName === true) {
      this._useScenarioName = true;
    }
    this._isServiceEnabled = lambdaCredentials.username && lambdaCredentials.accessKey;
    this._lambdaCredentials = lambdaCredentials;
  }
  async beforeScenario(world, context) {
    if (this._useScenarioName) {
      var _world$pickle;
      this._testTitle = (world === null || world === void 0 || (_world$pickle = world.pickle) === null || _world$pickle === void 0 ? void 0 : _world$pickle.name) || 'unknown scenario';
    } else if (!this._suiteTitle) {
      var _world$gherkinDocumen, _context$document, _world$pickle2;
      this._suiteTitle = (world === null || world === void 0 || (_world$gherkinDocumen = world.gherkinDocument) === null || _world$gherkinDocumen === void 0 || (_world$gherkinDocumen = _world$gherkinDocumen.feature) === null || _world$gherkinDocumen === void 0 ? void 0 : _world$gherkinDocumen.name) || (context === null || context === void 0 || (_context$document = context.document) === null || _context$document === void 0 || (_context$document = _context$document.feature) === null || _context$document === void 0 ? void 0 : _context$document.name) || (world === null || world === void 0 || (_world$pickle2 = world.pickle) === null || _world$pickle2 === void 0 ? void 0 : _world$pickle2.name) || 'unknown scenario';
    }
    await this.setSessionName(this._testTitle || this._suiteTitle);
  }
  async beforeSuite(suite) {
    this._suiteTitle = suite.title;
    if (suite.title && suite.title !== 'Jasmine__TopLevel__Suite') {
      await this.setSessionName(suite.title);
    }
  }
  async beforeTest(test) {
    if (!this._isServiceEnabled) {
      return;
    }
    if (test && (test === null || test === void 0 ? void 0 : test.parent) !== undefined) {
      this._currentTestTitle = test === null || test === void 0 ? void 0 : test.parent;
      this._currentTestTitle = `${this._currentTestTitle} - ${test === null || test === void 0 ? void 0 : test.title}`;
    } else if (test && (test === null || test === void 0 ? void 0 : test.fullName) !== undefined) {
      this._currentTestTitle = test === null || test === void 0 ? void 0 : test.fullName;
    }
    if (test.title && !this._testTitle) {
      this._testTitle = test.title;
    }
    let suiteTitle = this._suiteTitle;
    if (test.fullName) {
      const testSuiteName = test.fullName;
      if (this._suiteTitle === 'Jasmine__TopLevel__Suite') {
        suiteTitle = testSuiteName;
      } else if (this._suiteTitle) {
        suiteTitle = (0, _util.getParentSuiteName)(this._suiteTitle, testSuiteName);
      }
    }
    await this.setSessionName(suiteTitle, test);
  }
  async beforeFeature(uri, feature) {
    this._suiteTitle = feature.name;
    await this.setSessionName(this._suiteTitle);
  }
  async beforeStep(step) {
    if (!this._suiteTitle || this._suiteTitle == 'unknown scenario') {
      var _step$document, _step$step;
      this._suiteTitle = ((_step$document = step.document) === null || _step$document === void 0 || (_step$document = _step$document.feature) === null || _step$document === void 0 ? void 0 : _step$document.name) || ((_step$step = step.step) === null || _step$step === void 0 || (_step$step = _step$step.scenario) === null || _step$step === void 0 ? void 0 : _step$step.name) || 'unknown scenario';
      await this.setSessionName(this._suiteTitle);
    }
  }
  afterSuite(suite) {
    if (Object.prototype.hasOwnProperty.call(suite, 'error')) {
      ++this._failures;
    }
  }
  afterTest(test, context, {
    error,
    passed
  }) {
    this._specsRan = true;
    if (test._retriedTest && passed) {
      --this._failures;
      return;
    }
    if (test._retriedTest && !passed && typeof test._currentRetry === 'number' && typeof test._retries === 'number' && test._currentRetry < test._retries) {
      return;
    }
    const isJasminePendingError = typeof error === 'string' && error.includes('marked Pending');
    if (!passed && !isJasminePendingError) {
      ++this._failures;
      this._failReasons.push(error && error.message || 'Unknown Error');
      this._error = (error === null || error === void 0 ? void 0 : error.message) || 'Unknown Error';
      if (this._ltErrorRemark && this._error !== null && this._error !== undefined) {
        this._setSessionRemarks(this._error);
      }
    }
  }
  afterScenario(world, result) {
    var _world$result;
    const {
      passed
    } = result || {};
    this._specsRan = true;
    const status = (_world$result = world.result) === null || _world$result === void 0 ? void 0 : _world$result.status.toLowerCase();
    if (status !== 'skipped') {
      this._scenariosThatRan.push(world.pickle.name || 'unknown pickle name');
    }
    if (status && this._failureStatuses.includes(status)) {
      const exception = world.result && world.result.message || (status === 'pending' ? `Some steps/hooks are pending for scenario "${world.pickle.name}"` : 'Unknown Error');
      ++this._failures;
      this._failReasons.push(exception);
    } else if (typeof passed !== 'undefined' && !passed) {
      ++this._failures;
    }
  }
  after(result) {
    if (!this._isServiceEnabled) {
      return;
    }
    let failures = this._failures;
    if (this._config.mochaOpts && this._config.mochaOpts.bail && Boolean(result)) {
      failures = 1;
    }
    if (result === 0) {
      failures = 0;
    }
    const {
      preferScenarioName
    } = this._options;
    if (preferScenarioName && this._scenariosThatRan.length === 1) {
      this._fullTitle = this._scenariosThatRan.pop();
    }
    const status = 'status: ' + (result > 0 ? 'failed' : 'passed');
    if (!this._browser.isMultiremote) {
      log.info(`Update job with sessionId ${this._browser.sessionId}, ${status}`);
      if (process.env.LOG_SESSION_URL === "true") {
        const sessionURL = this.getSessionURL(this._browser.sessionId, this._config.product);
        log.info(`Session URL: ${sessionURL}`);
      }
      return this._update({
        sessionId: this._browser.sessionId,
        failures: result
      });
    }
    return Promise.all(Object.keys(this._capabilities).map(browserName => {
      log.info(`Update multiremote job for browser '${browserName}' and sessionId ${this._browser[browserName].sessionId}, ${status}`);
      if (process.env.LOG_SESSION_URL === "true") {
        const sessionURL = this.getSessionURL(this._browser[browserName].sessionId, this._config.product);
        log.info(`Session URL for ${browserName}: ${sessionURL}`);
      }
      return this._update({
        sessionId: this._browser[browserName].sessionId,
        failures: failures,
        calledOnReload: false,
        browserName: browserName
      });
    }));
  }
  async onReload(oldSessionId, newSessionId) {
    if (!this._isServiceEnabled) {
      return;
    }
    const status = this._failures > 0 ? 'failed' : 'passed';
    if (!this._browser.isMultiremote) {
      log.info(`Update (reloaded) job with sessionId ${oldSessionId}, ${status}`);
      if (process.env.LOG_SESSION_URL === "true") {
        const sessionURL = this.getSessionURL(this._browser.sessionId, this._config.product);
        log.info(`Session URL: ${sessionURL}`);
      }
      await this._update({
        sessionId: oldSessionId,
        fullTitle: this._currentTestTitle,
        status: status,
        calledOnReload: true
      });
    } else {
      const browserName = this._browser.instances.filter(browserName => this._browser[browserName].sessionId === newSessionId)[0];
      log.info(`Update (reloaded) multiremote job for browser '${browserName}' and sessionId ${oldSessionId}, ${status}`);
      if (process.env.LOG_SESSION_URL === "true") {
        const sessionURL = this.getSessionURL(this._browser[browserName].sessionId, this._config.product);
        log.info(`Session URL for ${browserName}: ${sessionURL}`);
      }
      await this._update({
        sessionId: oldSessionId,
        failures: this._failures,
        calledOnReload: true,
        browserName: browserName
      });
    }
    this._failReasons = [];
    this._scenariosThatRan = [];
    delete this._suiteTitle;
    delete this._fullTitle;
  }
  async _update({
    sessionId,
    fullTitle,
    status,
    failures,
    calledOnReload = false,
    browserName
  }) {
    if (!this._options.setSessionStatus) {
      return;
    }
    const sleep = ms => new Promise(r => setTimeout(r, ms));
    await sleep(5000);
    if (calledOnReload) {
      return await this.updateJob({
        sessionId,
        fullTitle,
        status,
        calledOnReload,
        browserName
      });
    }
    return await this.updateJob({
      sessionId,
      _failures: failures,
      calledOnReload,
      browserName
    });
  }
  async updateJob({
    sessionId,
    fullTitle,
    status,
    _failures,
    calledOnReload = false,
    browserName
  }) {
    let body = this.getBody({
      _failures,
      calledOnReload,
      browserName
    });
    if (calledOnReload) {
      body = this.getBody({
        fullTitle,
        status,
        calledOnReload,
        browserName
      });
    }
    try {
      await (0, _util.updateSessionById)(sessionId, body, this._lambdaCredentials);
    } catch (ex) {
      console.log(ex);
    }
    this._failures = 0;
  }
  getBody({
    fullTitle,
    status,
    _failures,
    calledOnReload = false,
    browserName
  }) {
    let body = {};
    if (!(!this._browser.isMultiremote && this._capabilities.name || this._browser.isMultiremote && this._capabilities[browserName].capabilities.name)) {
      body.name = this._fullTitle;
      if (calledOnReload) {
        body.name = fullTitle;
      }
      if (this._capabilities['LT:Options'] && this._capabilities['LT:Options'].name) {
        body.name = this._capabilities['LT:Options'].name;
      }
      if (browserName) {
        body.name = `${browserName}: ${body.name}`;
      }
      if (calledOnReload || this._testCnt) {
        let testCnt = ++this._testCnt;
        if (this._browser.isMultiremote) {
          testCnt = Math.ceil(testCnt / this._browser.instances.length);
        }
        if (!calledOnReload) {
          body.name += ` (${testCnt})`;
        }
      }
    }
    body.status_ind = _failures > 0 ? 'failed' : 'passed';
    if (calledOnReload) {
      body.status_ind = status;
    }
    return body;
  }
  async setSessionName(suiteTitle, test) {
    if (!this._options.setSessionName || !suiteTitle) {
      return;
    }
    let name = this._useScenarioName && this._testTitle ? this._testTitle : suiteTitle;
    if (this._options.sessionNameFormat) {
      name = this._options.sessionNameFormat(this._config, this._capabilities, suiteTitle, test === null || test === void 0 ? void 0 : test.title);
    } else if (test && !test.fullName) {
      const pre = this._options.sessionNamePrependTopLevelSuiteTitle ? `${suiteTitle} - ` : '';
      const post = !this._options.sessionNameOmitTestTitle ? ` - ${test.title}` : '';
      name = `${pre}${test.parent}${post}`;
    }
    if (name !== this.__fullTitle) {
      this.__fullTitle = name;
      await this._setSessionName(name);
    }
  }
  async _setSessionRemarks(err) {
    let replacedString = err.replace(/"/g, "'");
    let errorCustom = `lambda-hook: {"action": "setTestStatus","arguments": {"status":"failed","remark":"${replacedString}"}}`;
    try {
      await this._browser.execute(errorCustom);
    } catch (error) {
      console.log(error);
    }
  }
  async _setSessionName(sessionName) {
    await this._executeCommand(`lambda-name=${sessionName}`);
  }
  async _executeCommand(cmd) {
    if (!this._browser) {
      return;
    }
    if (this._browser.isMultiremote) {
      return Promise.all(Object.keys(this._capabilities).map(async browserName => {
        const browser = this._browser[browserName];
        return await browser.execute(cmd);
      }));
    }
    return await this._browser.execute(cmd);
  }
  getSessionURL(sessionId, product) {
    if (product === 'appAutomation') {
      return `${_constants.appSessionURL}=${sessionId}`;
    }
    return `${_constants.webSessionURL}=${sessionId}`;
  }
}
exports.default = LambdaRestService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,